/*
 * Copyright (c) Bosch Software Innovations GmbH 2019.
 * Copyright (c) Bosch.IO GmbH 2020.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 */

 /*
  * This is a extended version of the file ./Jenkinsfile, for building
  * within the Eclipse Foundation infrastructure, this includes
  * - support for Kubernetes Agents in EF infrastructure
  * - support for signing artifacts
  * - support for pushing to Eclipse download repository
  */


def VERSION
def IS_SNAPSHOT_VERSION

pipeline {
    agent any
    tools {
    	maven 'apache-maven-3.5.4'
    	jdk 'oracle-jdk8-latest'
    }
    parameters {
        booleanParam(
            name: 'PUSH_TO_REPO',
            defaultValue: false,
            description: 'Push to artifact repository')
    }
    stages {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // we need to know the version of our project, for that we use the maven-help-plugin
//        stage('determine version') {
//            steps {
//                script {
//                    VERSION = sh (
//                        script: 'mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout',
//                        returnStdout: true
//                    ).trim()
//                    IS_SNAPSHOT_VERSION = (VERSION ==~ /.*-SNAPSHOT/)
//                }
//                sh "echo \"VERSION is: ${VERSION} with IS_SNAPSHOT_VERSION=${IS_SNAPSHOT_VERSION}\""
//
//                sh 'rm -rf localRepository'
//                sh 'mkdir -p localRepository'
//            }
//        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // build antenna
        stage('build') {
            steps {
                sh 'rm -rf repository'
                sh 'mkdir -p repository'
                // build antenna and also deploy it to an output repository
                sh 'java -version'
                sh 'mvn --version'
//                sh """
//                    mvn -Dmaven.repo.local=\$(readlink -f localRepository) \
//                        --batch-mode \
//                        install -DskipTests -DskipITs eclipse-jarsigner:sign \
//                        -pl '!assembly/compliance-tool,!assembly/cli'
//                  mvn -Dmaven.repo.local=\$(readlink -f localRepository) \
//                      --batch-mode \
//                      install -DskipTests -DskipITs eclipse-jarsigner:sign deploy \
//                      -pl '!core/model-testing,!core/frontend-stubs-testing,!assembly/compliance-tool,!assembly/cli' \
//                      -DaltDeploymentRepository=localRepositoryFolder::default::file:\$(readlink -f ./repository)
//                """
                sh 'ls repository/org/eclipse/sw360/antenna/'
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // push generated repository to download.eclipse.org
        // depending on the version, the result gets pushed to
        //   - https://download.eclipse.org/antenna/snapshots (and all old snapshot builds will be deleted) or
        //   - https://download.eclipse.org/antenna/releases
/*        stage ('push repository to download.eclipse.org to antenna/snapshots') {
            when {
                expression {
                    return params.PUSH_TO_REPO && IS_SNAPSHOT_VERSION
                }
            }
            steps {
                container('maven') {
                    sh 'find repository -iname \'*.jar\' -print -exec jarsigner -verify {} \\;'
                }
                sshagent ( ['projects-storage.eclipse.org-bot-ssh']) {
                    sh '''
                      ssh -o StrictHostKeyChecking=no \
                          genie.antenna@projects-storage.eclipse.org \
                          rm -rf /home/data/httpd/download.eclipse.org/antenna/snapshots
                      ssh -o StrictHostKeyChecking=no \
                          genie.antenna@projects-storage.eclipse.org \
                          mkdir -p /home/data/httpd/download.eclipse.org/antenna/snapshots
                      scp -o StrictHostKeyChecking=no \
                          -r ./repository/* \
                          genie.antenna@projects-storage.eclipse.org:/home/data/httpd/download.eclipse.org/antenna/snapshots
                    '''
                }
                echo 'Snapshot release is published at https://download.eclipse.org/antenna/snapshots'
            }
        }
        stage ('push repository to download.eclipse.org to antenna/releases') {
            when {
                expression {
                    return params.PUSH_TO_REPO && ! IS_SNAPSHOT_VERSION
                }
            }
            steps {
                container('maven') {
                    sh 'find repository -iname \'*.jar\' -print -exec jarsigner -verify {} \\;'
                }
                sshagent ( ['projects-storage.eclipse.org-bot-ssh']) {
                    sh '''
                      ssh -o StrictHostKeyChecking=no \
                          genie.antenna@projects-storage.eclipse.org \
                          mkdir -p /home/data/httpd/download.eclipse.org/antenna/releases
                      scp -o StrictHostKeyChecking=no \
                          -r ./repository/* \
                          genie.antenna@projects-storage.eclipse.org:/home/data/httpd/download.eclipse.org/antenna/releases
                    '''
                }
                echo 'Release is published at https://download.eclipse.org/antenna/releases'
            }
        }*/
    }
}
