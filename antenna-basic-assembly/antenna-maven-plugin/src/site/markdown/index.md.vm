# How to use ${docNameCap} as a Maven plugin

Using ${docNameCap} as a Maven plugin is made possible by following the steps in
the configuration instructions (see [Configuration guide](../how-to-configure.html)).
Adding ${antennaMavenPluginName} to your project's list of plugins enables the ${docNameCap} Maven commands.

```xml
<plugin>
    <groupId>${antennaMavenGroupId}</groupId>
    <artifactId>${antennaMavenPluginName}</artifactId>
    <version>x.y.z</version> <!-- enter desired version here -->

    <configuration>
        ...
    </configuration>
</plugin>
```

You can execute the plugin either with the command line call:

```
mvn antenna:analyze
```

Or bind the analyze goal to a phase:

```xml
<executions>
    <execution>
        <goals>
            <goal>analyze</goal>
        </goals>
        <phase>package</phase>
    </execution>
</executions>
```

#[[##]]# Customizing the disclosure document

${docNameCap} provides a built-in disclosure document template that works out of 
the box. However, you can install jar files that apply a different theme 
to the document.
 
To do this, add a dependency to your project's pom.xml file where you
install the ${docNameCap} plugin, something like this:

```xml
<dependency>
    <groupId>${antennaMavenGroupId}</groupId>
    <artifactId>${antennaDisclosureDocumentName}</artifactId>
</dependency>
```

#[[##]]# Adding workflow steps and plugins

It is possible to use workflow steps, knowledge-bases, etc. also if they are not referenced in the assembly.
To do this, the jars need to be added as a dependency for the build.
If you have a custom plugin `my-custom-plugin` with groupId `org.mycompany.plugin`, artifactId `my-custom-plugin` and version `VERSION`, modify the `buildscript` part within `build.gradle` as follows:

```xml
<dependency>
    <groupId>org.mycompany.plugin</groupId>
    <artifactId>my-custom-plugin</artifactId>
    <version>VERSION</version>
</dependency>
```
