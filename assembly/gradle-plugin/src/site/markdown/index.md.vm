# How to use ${docNameCap} as a Gradle plugin

For Gradle, ${docNameCap} is configured in an external configuration file, which is expected to have the same format as the plugin configuration of the `${antennaMavenPluginName}`.
Please refer to the documentation of [the ${antennaMavenPluginName}](../${docName}-maven-plugin/index.html).

The plugin itself is configured in your `build.gradle` file by adding the following configuration.

```groovy
buildscript{
    repositories {
        mavenLocal()
        mavenCentral()
        ${antennaGradleRepoAddition}
    }

    dependencies {
        classpath '${antennaMavenGroupId}:${antennaGradlePluginName}:VERSION'
    }
}

apply plugin: ${antennaGradleJavaFilename}

repositories {
    mavenLocal()
    mavenCentral()
}

${docNameCap}Configuration{
    pomPath 'pom.xml'
    debugEnabled = false
}
```

Some additional pointers:

* For Gradle, Maven is optional.
Should you choose to run ${docNameCap} without having the maven environment variable `M2_HOME` set, the mvn dependency tree plugin will not work.
The result could possibly not include some information that could have been useful.
If you choose to run ${docNameCap} with Maven, you need to set the maven environment variable (`M2_HOME` should be set to the maven executable) and add
```xml
<isMavenInstalled>true</isMavenInstalled>
```
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to the ${docNameCap} configuration in the pom.xml.


* All paths must be absolute.

* For technical reasons variables / properties containing dots will in general not be rendered correctly

    * No Maven variables can be used (except for `project.build.directory`, `project.build.outputDirectory` and `project.basedir`, since they have been added to the context).

    * Properties with a dot in them, like `${system.password}` should be changed to `${systemPassword}` in order to be rendered.

#[[##]]# Adding workflow steps and plugins

It is possible to use workflow steps, knowledge-bases, etc. also if they are not referenced in the assembly.
To do this, the jars need to be added as dependencies to the plugin step of Gradle.
If you have a custom plugin `my-custom-plugin` with groupId `org.mycompany.plugin`, artifactId `my-custom-plugin` and version `VERSION`, modify the `buildscript` part within `build.gradle` as follows:

```groovy
buildscript{
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath 'org.eclipse.sw360.antenna:basic-gradle-plugin:VERSION'
        classpath 'org.mycompany.plugin:my-custom-plugin:VERSION'
    }
}
```
