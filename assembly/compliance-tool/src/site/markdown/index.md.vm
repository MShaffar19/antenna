# How to use the ComplianceTool

This is a frontend of ${docNameCap} that can be used as a compliance manager tool.
This is especially targeted to create clean and approved metadata in a SW360 instance.

This tool can be used for a round trip in order to enrich and clear metadata in a SW360 instance.
The round trip would look like this:

* Data about incomplete/non-cleared releases is exported from SW360 to a csv file ([SW360 Exporter](./exporter.html))
* The csv file is then edited manually 
    * Information is corrected or added to the releases
    * When information is sufficient the clearing state of a release can be set to one of the approval states. 
* Based on the edits in the csv file, SW360 is updated and clearing states are set. ([SW360 Updater](./updater.html))

The csv file used adheres to the ${docNameCap} [SW360 data model](../sw360-data-model.html). 

#[[##]]# Running

The Compliance Tool is executed from the command line with this simple line:

```
java -jar path\to\complianceTool.jar --<complianceMode> path\to\configuration.properties
```

* Jar file: This is the actual compliance tool jar. Execute it with a `java -jar` command.
* The `complianceMode` can be one of two modes that can be given by using switches: 
`--exporter` for the [SW360 Exporter](./exporter.html),
`--updater` for the [SW360 Updater](./updater.html) or
`--reporter` for the [SW360 Status Reporter](status_reporter.html).
    * There is also a short version with `-e` for the exporter and `-u` for the updater.
    * If no or more than one switch-mode is given, the compliance tool will not run.
* Properties file: both modes require a file containing properties like paths and credentials.

#[[##]]# Environment Properties
It is possible to give credentials via environment properties. 
If you want one of the properties in your properties file to
be resolved to an environment variable, 
add the `$` prefix to it and wrap it in curly braces `{}`,
additionally to the variable name being written in upper case letters:
    
    ```
    key=${ENV_VARIABLE}
    ```
    
#[[####]]# Note
1. It is possible to have only one properties file containing all variables. 
When run all superfluous variables will just be ignored.

#[[##]]# Enabling debug logging

To diagnose problems during the tool execution, more detailed log output is
certainly helpful. This can be achieved by adding one of the switches `-X` or
`--debug` to the command line. The log level is then increased to _DEBUG_, so
much more information is printed to the console. 

In order to see all valid switches and a help statement use the switch `--help` 
or `-h`.  

#[[##]]# Common Properties
There are properties all modes share. They need to be provided in every properties file.

The SW360 properties are used to give the url of the used sw360 instance and the necessary credentials:

- `sw360restServerUrl`: Link to the rest server url of your SW360 instance
- `sw360authServerUrl`: Link to the authentication server url of your SW360 instance
- `sw360user`: SW360 Username
- `sw360password`: SW360 User Password
- `sw360clientId`: SW360 Client Id
- `sw360clientPassword`: SW360 Client Password

Proxy information needs to be given if the compliance tool is used from within a proxy.
If a proxy is not in use, `proxyUse` should be set to `false`:

- `proxyHost`: If a proxy is in use, supply the host name
- `proxyPort`: If a proxy is in use, supply the port
- `proxyUse`: If a proxy is in use, this should be set to true

Directory parameters that all modes need:

- `basedir`: Base directory of the execution
- `csvFilePath`: Path and name where the csv file should be saved; this should be a relative path; it is resolved against the base directory