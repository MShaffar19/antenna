# How to use the ComplianceTool

This is a frontend of ${docNameCap} that can be used as a compliance manager tool.
This is especially targeted to create clean and approved metadata in a SW360 instance.

This tool can be used for a round trip in order to enrich and clear metadata in a SW360 instance.
The round trip would look like this:

* Data about incomplete/non-cleared releases is exported from SW360 to a csv file ([SW360 Exporter](#SW360Exporter))
* The csv file is then edited manually 
    * Information is corrected or added to the releases
    * When information is sufficient the clearing state of a release can be set to one of the approval states. 
* Based on the edits in the csv file, SW360 is updated and clearing states are set. ([SW360 Updater](#SW360Updater))

The csv file used adheres to the ${docNameCap} [SW360 data model](../sw360-data-model.html). 

#[[##]]# Configuring

#[[##]]# Running

The Compliance Tool is executed from the command line with this simple line:

```
java -jar path\to\complianceTool.jar --<complianceMode> path\to\configuration.properties
```

* Jar file: This is the actual compliance tool jar. Execute it with a `java -jar` command.
* The `complianceMode` can be one of two modes that can be given by using switches: 
`--exporter` for the [SW360 Exporter](#SW360Exporter)
or `--updater` for the [SW360 Updater](#SW360Updater). 
    * There is also a short version with `-e` for the exporter and `-u` for the updater.
    * If no or more than one switch-mode is given, the compliance tool will not run.
* Properties file: both modes require a file containing properties like paths and credentials.

#[[##]]# <a name="SW360Exporter">SW360 Exporter</a>

The SW360 Exporter requests all components from a given SW360 instance
and filters the releases of the components to check if they have a state
that shows them as "cleared" or "approved".
It then creates a list with the data of non-cleared releases and writes them
sorted by creation date (from latest to oldest) in a csv file.

The csv file follows the csv format accepted by the CSV Analyzer of ${docNameCap}

#[[####]]# Properties
- `targetDir`: Target directory in which artificial clearing reports are created in. 
- `sourcesDirectory`: Directory where the sources downloaded are stored
- `basedir`: Base directory of the execution
- `csvFilePath`: Path and name where the csv file should be saved
- `removeUnreferencedSources`: A boolean property that controls whether the exporter should do some cleanup on the sources directory. If set to *true*, the exporter checks after the download of sources whether the directory contains any files that are not referenced by any of the components that have been written to the CSV file. Such files are then removed, so that the directory contains only the sources of components that are currently in focus. The default value of this flag if *false*. 
- `proxyHost`: If a proxy is in use, supply the host name
- `proxyPort`: If a proxy is in use, supply the port
- `proxyUse`: If a proxy is in use, this should be set to true
- `sw360restServerUrl`: Link to the rest server url of your SW360 instance
- `sw360authServerUrl`: Link to the authentication server url of your SW360 instance
- `sw360user`: SW360 Username
- `sw360password`: SW360 User Password
- `sw360clientId`: SW360 Client Id
- `sw360clientPassword`: SW360 Client Password

#[[##]]# <a name="SW360Updater">SW360 Updater</a>

The SW360Updater takes a given csv file with release
information and maps the contents on SW360Release objects
that are posted into the given SW360 instance. 
It has the ability to update release information of already existing releases. 

#[[####]]# Properties
- `targetDir`: Target directory in which artificial clearing reports are created in. 
- `sourcesDirectory`: Directory where the sources for uploading are stored
- `basedir`: Base directory of the execution
- `csvFilePath`: Path and name to the csv file with the release information
- `delimiter`: Delimiter used in the csv file to separate columns (by default it is `,`)
- `encoding`: Encoding of the csv file, normally `UTF-8` 
- `removeClearedSources`: A boolean property that controls whether the updater should remove the source attachments of a release from the local sources directory once the release has been cleared. Cleared releases are no longer relevant for the workflow of the compliance tool; so by setting this property to *true*, an automatic cleanup of the sources directory can be enabled. The default value is *false*.
- `removeClearingDocuments`: A boolean property that controls whether clearing documents for releases should be removed after the release has been cleared. The default value is *false*.
- `proxyHost`: If a proxy is in use, supply the host name
- `proxyPort`: If a proxy is in use, supply the port
- `proxyUse`: If a proxy is in use, this should be set to true
- `sw360restServerUrl`: Link to the rest server url of your SW360 instance
- `sw360authServerUrl`: Link to the authentication server url of your SW360 instance
- `sw360user`: SW360 Username
- `sw360password`: SW360 User Password
- `sw360clientId`: SW360 Client Id
- `sw360clientPassword`: SW360 Client Password
- `sw360updateReleases`: Boolean value that determines if release data is patched should new information be added to an already existent release
- `sw360uploadSources`: Boolean value that determines if source files of a release are uploaded should they be present.

#[[##]]# Environment Properties
It is possible to give credentials via environment properties. 
If you want one of the properties in your properties file to
be resolved to an environment variable, 
add the `$` prefix to it and wrap it in curly braces `{}`,
additionally to the variable name being written in upper case letters:
    
    ```
    key=${ENV_VARIABLE}
    ```
    
#[[####]]# Note
1. It is possible to have only one properties file containing all variables. 
When run all superfluous variables will just be ignored.

#[[##]]# Enabling debug logging

To diagnose problems during the tool execution, more detailed log output is
certainly helpful. This can be achieved by adding one of the switches `-X` or
`--debug` to the command line. The log level is then increased to _DEBUG_, so
much more information is printed to the console. 

In order to see all valid switches and a help statement use the switch `--help` 
or `-h`.  